{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.addaefaec291991072f8.hot-update.js","sources":["webpack:///./components/Posts.tsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Link from 'next/link';\r\nimport Router, { RouterProps } from 'next/router';\r\nimport { Card, Avatar } from 'antd';\r\nimport moment from 'moment';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport debounce from 'lodash/debounce';\r\nimport localStorage from 'store/storages/localStorage';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport Masonry from '../components/masonry';\r\nimport { CSSMapper } from '../types/utils';\r\nimport EmptyPage from '../components/EmptyPage';\r\nimport { IPost } from '../types/post';\r\nimport { IAuthor } from '../types/author';\r\nimport { ITag } from '../types/tag';\r\nimport { setMetadatas } from '../utils/Utils';\r\nimport BackTop from './BackTop';\r\n\r\ninterface IProps {\r\n    posts: Record<string, IPost>;\r\n    authors: Record<string, IAuthor>;\r\n    tags: Record<string, ITag>;\r\n    setPost?: (args?: any) => void;\r\n    router?: RouterProps;\r\n}\r\n\r\ninterface IState {\r\n    posts: Record<string, IPost>;\r\n}\r\n\r\nconst styles: CSSMapper = {\r\n    thumbnail: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: 300,\r\n        height: 160,\r\n        overflow: 'hidden',\r\n    },\r\n    title: { wordBreak: 'break-word' },\r\n    card: { margin: '16px 0' },\r\n    cardBody: { height: '12rem' },\r\n    cardCover: {\r\n        width: '100%',\r\n        paddingTop: '56.25%',\r\n        position: 'relative',\r\n        display: 'block',\r\n    },\r\n    cardThumbnail: {\r\n        OObjectFit: 'cover',\r\n        objectFit: 'cover',\r\n        display: 'block',\r\n        borderTopLeftRadius: '4px',\r\n        borderTopRightRadius: '4px',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    cardPreview: {\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        display: '-webkit-box',\r\n        WebkitLineClamp: 3,\r\n        WebkitBoxOrient: 'vertical',\r\n        wordWrap: 'break-word',\r\n        marginTop: '1.5rem',\r\n    },\r\n}\r\n\r\nclass Posts extends Component<IProps, IState> {\r\n    state: IState = {\r\n        posts: this.props.posts,\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { tags, posts, router } = this.props;\r\n        this.getPosts(router.query, tags, posts, () => {\r\n            this.getPostsScroll();\r\n        });\r\n        this.attachEvents();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IProps) {\r\n        const { tags, posts, router } = nextProps;\r\n        if (!isEmpty(router.query) && !isEmpty(tags)) {\r\n            this.getPosts(router.query, tags, posts);\r\n        } else {\r\n            this.setState({\r\n                posts,\r\n            }, () => {\r\n                this.getPostsScroll();\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.detachEvents()\r\n    }\r\n\r\n    onScroll = debounce((e) => {\r\n        localStorage.write('postsScroll', e.target.scrollTop);\r\n    }, 100)\r\n\r\n    attachEvents = () => {\r\n        document.querySelector('.ant-layout-content').addEventListener('scroll', this.onScroll);\r\n    }\r\n\r\n    detachEvents = () => {\r\n        document.querySelector('.ant-layout-content').removeEventListener('scroll', this.onScroll);\r\n    }\r\n\r\n    getPostsScroll = () => {\r\n        const postsScroll = localStorage.read('postsScroll');\r\n        const scrollTop = postsScroll ? parseInt(postsScroll, 10) : 0;\r\n        const content = document.querySelector('.ant-layout-content');\r\n        content.scrollTo(0, scrollTop);\r\n    }\r\n\r\n    getPosts = (params: any, tags: Record<string, ITag>, posts: Record<string, IPost>, callback?: any) => {\r\n        const tag = tags[params.tag];\r\n        const search = params.search;\r\n        setMetadatas({});\r\n        if (tag && !isEmpty(posts)) {\r\n            const { paths } = tag;\r\n            const filteredPosts = paths.reduce((prev, curr) => {\r\n                const metadata = posts[curr];\r\n                return Object.assign(prev, { [curr]: metadata });\r\n            }, {});\r\n            console.log(filteredPosts);\r\n            this.setState({\r\n                posts: filteredPosts,\r\n            }, () => {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            });\r\n        } else if(search) {\r\n            const filteredPosts = Object.keys(posts).reduce((prev, curr) => {\r\n                const metadata = posts[curr];\r\n                if (metadata.title.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n                || metadata.preview.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n                || metadata.tags.toLowerCase().indexOf(search.toLowerCase()) >= 0) {\r\n                    return Object.assign(prev, { [curr]: metadata });\r\n                }\r\n                return prev;\r\n            }, {});\r\n            this.setState({\r\n                posts: filteredPosts,\r\n            }, () => {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({\r\n                posts,\r\n            }, () => {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleClick = (metadata: IPost) => {\r\n        const postHistory = JSON.parse(localStorage.read('postHistory')) || [];\r\n        const findIndex = postHistory.findIndex((value: any) => value.path === metadata.path);\r\n        if (findIndex >= 0) {\r\n            postHistory.splice(findIndex, 1);\r\n        }\r\n        postHistory.unshift({\r\n            path: metadata.path,\r\n            title: metadata.title,\r\n        });\r\n        localStorage.write('postHistory', JSON.stringify(postHistory));\r\n        Router.push(metadata.path);\r\n    }\r\n\r\n    renderCard = () => {\r\n        const { authors } = this.props;\r\n        const { posts } = this.state;\r\n        return !isEmpty(posts) && !isEmpty(authors) ? (\r\n            <Masonry.Box>\r\n                {\r\n                    Object.keys(posts).map(key => {\r\n                        const metadata = posts[key];\r\n                        const author = authors[metadata.author];\r\n                        return (\r\n                            <Masonry.Item key={key} className=\"container-col\" col=\"3\">\r\n                                <Card\r\n                                    hoverable={true}\r\n                                    onClick={() => this.handleClick(metadata)}\r\n                                    cover={\r\n                                        <Link as={key} href={`/post?slug=${key}`}>\r\n                                            <a style={styles.cardCover}>\r\n                                                <img\r\n                                                    style={styles.cardThumbnail}\r\n                                                    alt=\"Post cover\"\r\n                                                    src={metadata.cover || '/images/default/no-image.svg'}\r\n                                                />\r\n                                            </a>\r\n                                        </Link>\r\n                                    }\r\n                                    bodyStyle={styles.cardBody}\r\n                                >\r\n                                    <Card.Meta\r\n                                        avatar={<Avatar src={author.avatar}>{author.name.charAt(0).toUpperCase()}</Avatar>}\r\n                                        title={<h2 className=\"ant-card-meta-title\">{metadata.title}</h2>}\r\n                                        description={moment(metadata.date).fromNow()}\r\n                                    />\r\n                                    <div style={styles.cardPreview}>\r\n                                        {metadata.preview}\r\n                                    </div>\r\n                                </Card>\r\n                            </Masonry.Item>\r\n                        );\r\n                    })\r\n                }\r\n            </Masonry.Box>\r\n        ) : <EmptyPage />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Helmet title=\"Dev.log\" />\r\n                {this.renderCard()}\r\n                <BackTop />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Posts;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AA9BA;AACA;AAwCA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAQA;AAdA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AAAA;AAMA;AAIA;AACA;;;;;;AAnJA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AA6HA;AACA;AACA;AAAA;AACA;AAAA;AAKA;;;;AAjKA;AACA;AAmKA;;;;A","sourceRoot":""}