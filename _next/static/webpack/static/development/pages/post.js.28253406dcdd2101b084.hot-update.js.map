{"version":3,"file":"static/webpack/static\\development\\pages\\post.js.28253406dcdd2101b084.hot-update.js","sources":["webpack:///./components/Post.tsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Divider, Icon } from 'antd';\r\nimport moment from 'moment';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport throttle from 'lodash/throttle';\r\nimport Router, { RouterProps } from 'next/router';\r\nimport Helmet from 'react-helmet';\r\nimport Adsense from 'react-adsense';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport ContentLoader from 'react-content-loader';\r\nimport mediumZoom from 'medium-zoom';\r\n\r\nimport { IPost } from '../types/post';\r\nimport { CSSMapper } from '../types/utils';\r\nimport ErrorPage from '../components/ErrorPage';\r\nimport Tags from '../components/Tags';\r\nimport Comments from '../components/Comments';\r\nimport AuthorInfo from '../components/AuthorInfo';\r\nimport { IAuthor } from '../types/author';\r\nimport BackTop from '../components/BackTop';\r\nimport Events from '../utils/Events';\r\nimport { setMetadatas } from '../utils/Utils';\r\n\r\ninterface IProps {\r\n    id: string;\r\n    posts: Record<string, IPost>;\r\n    authors: Record<string, IAuthor>;\r\n    setPost?: (args?: any) => void;\r\n    router?: RouterProps;\r\n}\r\n\r\ninterface IState {\r\n    post: IPost;\r\n    author: IAuthor;\r\n    error: boolean;\r\n}\r\n\r\nconst styles: CSSMapper = {\r\n    container: { display: 'flex', justifyContent: 'center' },\r\n    viewContainer: { margin: 'auto', maxWidth: 992, flex: 1, width: 'inherit' },\r\n    prevPost: {\r\n        right: 0,\r\n        position: 'fixed',\r\n        marginRight: 32,\r\n        fontSize: '1.25rem',\r\n    },\r\n    nextPost: {\r\n        left: 0,\r\n        position: 'relative',\r\n        marginLeft: 32,\r\n        fontSize: '1.25rem',\r\n    },\r\n    postHeader: {\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n        height: '20rem',\r\n        marginBottom: '2rem',\r\n    },\r\n    postCover: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    title: { fontSize: '2.5em', textAlign: 'center', marginBottom: '2rem', lineHeight: '3.2rem', wordBreak: 'break-word', color: '#fff' },\r\n    createdTime: { fontSize: '1.125em', color: '#ffffffc2' },\r\n    createDate: { marginRight: 8 },\r\n    authorInfo: { margin: '32px 0 32px 0' },\r\n    tags: { display: 'flex', alignItems: 'center', margin: '64px 0 32px 0' },\r\n    tagsIcon: { fontSize: 18, marginRight: 16 },\r\n};\r\n\r\nclass Post extends Component<IProps, IState> {\r\n    private timeoutId: NodeJS.Timeout;\r\n\r\n    state: IState = {\r\n        post: {},\r\n        author: {},\r\n        error: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        const content = document.querySelector('.blog-markdown');\r\n        this.waitForPostContainer(content);\r\n        const { router, posts, authors } = this.props;\r\n        this.getPost(router, posts, authors);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IProps) {\r\n        const { router, posts, authors } = nextProps;\r\n        this.getPost(router, posts, authors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Events.emit('setpost', {});\r\n    }\r\n\r\n    waitForPostContainer = (content) => {\r\n        this.timeoutId = setTimeout(() => {\r\n            if (content) {\r\n                this.attachEvents(document.querySelector('.ant-layout-content'));\r\n                const images = document.querySelectorAll('.blog-markdown img');\r\n                this.attachImagesZoomable(images);\r\n                return;\r\n            }\r\n            const queryContent = document.querySelector('.blog-markdown');\r\n            this.waitForPostContainer(queryContent);\r\n        }, 5);\r\n    }\r\n\r\n    attachEvents = (content) => {\r\n        const centerHeight = content.clientHeight / 2;\r\n        const postPrev = document.getElementById('post-prev');\r\n        if (postPrev) {\r\n            postPrev.style.top = `${content.scrollTop + centerHeight}px`;\r\n        }\r\n        const postNext = document.getElementById('post-next');\r\n        if (postNext) {\r\n            postNext.style.top = `${content.scrollTop + centerHeight}px`;\r\n        }\r\n        content.addEventListener('scroll', throttle((e) => {\r\n            const centerHeight = e.target.clientHeight / 2;\r\n            const postPrev = document.getElementById('post-prev');\r\n            if (postPrev) {\r\n                postPrev.style.top = `${e.target.scrollTop + centerHeight}px`;\r\n            }\r\n            const postNext = document.getElementById('post-next');\r\n            if (postNext) {\r\n                postNext.style.top = `${e.target.scrollTop + centerHeight}px`;\r\n            }\r\n        }, 200));\r\n    }\r\n\r\n    attachImagesZoomable = (images) => {\r\n        console.log(images);\r\n        mediumZoom(images);\r\n    }\r\n\r\n    getPost = (router: any, posts: Record<string, IPost>, authors: Record<string, IAuthor>) => {\r\n        const post = posts[router.query.slug];\r\n        if (post) {\r\n            setMetadatas(post);\r\n            const author = authors[post.author];\r\n            this.setState({\r\n                post,\r\n                author,\r\n            }, () => {\r\n                Events.emit('setpost', post);\r\n            });\r\n        } else {\r\n            if (!isEmpty(posts)) {\r\n                clearTimeout(this.timeoutId);\r\n                this.setState({\r\n                    post: {},\r\n                    error: true,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClickTag = (e: any) => {\r\n        const tag = e.target.textContent;\r\n        Router.push(`/?tag=${tag.trim()}`);\r\n    }\r\n\r\n    renderSkeleton = () => {\r\n        return (\r\n            <div style={styles.viewContainer}>\r\n                <ContentLoader\r\n                    speed={2}\r\n                    primaryColor=\"#f3f3f3\"\r\n                    secondaryColor=\"#ecebeb\"\r\n                    height={900}\r\n                    width={400}\r\n                >\r\n                    <rect x=\"0\" y=\"0\" rx=\"5\" ry=\"5\" width=\"400\" height=\"150\" />\r\n                    {Array.from(new Array(30), (v, k) => <rect key={k} y={120 + (k * 30)} rx=\"0\" ry=\"0\" width=\"400\" height=\"12\" />)}\r\n                </ContentLoader>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { error, post, author } = this.state;\r\n        return (\r\n            <div className=\"container\" style={styles.container}>\r\n                <Helmet title={post.title || 'Dev.log'} />\r\n                {\r\n                    error ? (\r\n                        <ErrorPage status={404} />\r\n                    ) : !isEmpty(post) ? (\r\n                        <>\r\n                            <SwipeableViews\r\n                                resistance\r\n                                style={styles.viewContainer}\r\n                                index={post.prev ? 1 : 0}\r\n                                onChangeIndex={(index) => {\r\n                                    if (index === 2) Router.push(post.next);\r\n                                    if (index === 1) Router.push(post.next);\r\n                                    if (index === 0) Router.push(post.prev);\r\n                                }}\r\n                            >\r\n                                {\r\n                                    [post].reduce((prev, curr) => {\r\n                                        if (curr.prev) {\r\n                                            prev.push(\r\n                                                <div key={curr.prev} style={styles.viewContainer}>\r\n                                                    <div id=\"post-prev\" style={styles.prevPost}>\r\n                                                        <Icon type=\"arrow-left\" style={{ marginRight: 4 }} />\r\n                                                        이전 글\r\n                                                    </div>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                        prev.push(\r\n                                            <div key={curr.path} style={styles.viewContainer}>\r\n                                                <div className=\"post-header\" style={{ ...styles.postHeader, backgroundImage: `url(${post.cover || '/static/images/default/no-image.svg'})` }}>\r\n                                                    <div style={styles.postCover}>\r\n                                                        <h1 className=\"post-title\" style={styles.title}>\r\n                                                            {post.title}\r\n                                                        </h1>\r\n                                                        <div style={styles.createdTime}>\r\n                                                            <span style={styles.createDate}>{moment(post.date).format('YYYY.MM.DD')}</span>\r\n                                                            <span>{`(${moment(post.date).fromNow()})`}</span>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"blog-markdown\">\r\n                                                    <div className=\"markdown-body\" dangerouslySetInnerHTML={{ __html: post.content }} />\r\n                                                </div>\r\n                                                <div style={styles.tags}>\r\n                                                    <Icon type=\"tags\" style={styles.tagsIcon} />\r\n                                                    <Tags tagStyle={{ cursor: 'pointer' }} tags={post.tags ? post.tags.trim().split(',') : []} onClick={this.handleClickTag} />\r\n                                                </div>\r\n                                                {/* <Adsense.Google\r\n                                                    client=\"ca-pub-8569372752842198\"\r\n                                                    slot=\"7788836161\"\r\n                                                    style={{ display: 'block' }}\r\n                                                    format='auto'\r\n                                                    responsive='true'\r\n                                                /> */}\r\n                                                <Divider />\r\n                                                <div style={styles.authorInfo}>\r\n                                                    <AuthorInfo author={author} />\r\n                                                </div>\r\n                                                <Divider />\r\n                                                <Comments />\r\n                                            </div>\r\n                                        );\r\n                                        if (curr.next) {\r\n                                            prev.push(\r\n                                                <div key={curr.next} style={styles.viewContainer}>\r\n                                                    <div id=\"post-next\" style={styles.nextPost}>\r\n                                                        다음 글\r\n                                                        <Icon type=\"arrow-right\" style={{ marginLeft: 4 }} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                        return prev;\r\n                                    }, [])\r\n                                }\r\n                            </SwipeableViews>\r\n                            <BackTop />\r\n                        </>\r\n                    ) : this.renderSkeleton()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAgBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAnCA;AACA;AAqCA;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAHA;AACA;AAqBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;;;;;;AApGA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;;;AAEA;AACA;AACA;;;AAuFA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AASA;;;;AArMA;AACA;AAuMA;;;;A","sourceRoot":""}