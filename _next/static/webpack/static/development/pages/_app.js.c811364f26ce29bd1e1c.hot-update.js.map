{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.c811364f26ce29bd1e1c.hot-update.js","sources":["webpack:///./components/Search.tsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, Tag, Icon } from 'antd';\r\nimport localStorage from 'store/storages/localStorage';\r\nimport Router, { RouterProps } from 'next/router';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nimport { CSSMapper } from '../types/utils';\r\nimport { ITags } from '../types/tag';\r\nimport { IPost } from '../types/post';\r\nimport Dialog from '../components/Dialog';\r\nimport Events from '../utils/Events';\r\n\r\ninterface IProps {\r\n    router?: RouterProps;\r\n    tags: ITags;\r\n    post?: IPost;\r\n}\r\n\r\ninterface IState {\r\n    search?: string | string[];\r\n    searchHistory: string[];\r\n    postHistory: { [key: string]: any }[];\r\n    isMobile: boolean;\r\n    collapsed: boolean;\r\n}\r\n\r\nconst styles: CSSMapper = {\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n    },\r\n    search: {\r\n        margin: 16,\r\n    },\r\n    tags: {\r\n        margin: 16,\r\n        flex: 1,\r\n    },\r\n    tag: {\r\n        margin: 8,\r\n        cursor: 'pointer',\r\n    },\r\n    historyList: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        margin: 8,\r\n    },\r\n    history: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        marginLeft: 8,\r\n    },\r\n    historyAction: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        flex: 1,\r\n    },\r\n    historyClear: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        padding: 8,\r\n    },\r\n}\r\n\r\nclass Search extends Component<IProps, IState> {\r\n    state: IState = {\r\n        search: '',\r\n        searchHistory: [],\r\n        postHistory: [],\r\n        isMobile: false,\r\n        collapsed: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        Events.on('searchcollapse', () => {\r\n            this.setState({\r\n                collapsed: !this.state.collapsed,\r\n            });\r\n        });\r\n        let isMobile = false;\r\n        if (typeof window.matchMedia !== 'function') {\r\n            console.error('Does not support matchMedia');\r\n        } else {\r\n            const mql = window.matchMedia('(min-width: 576px)');\r\n            isMobile = !mql.matches;\r\n            mql.addListener((e) => {\r\n                this.setState({\r\n                    isMobile: !e.matches,\r\n                });\r\n            });\r\n        }\r\n        this.setState({\r\n            isMobile,\r\n        });\r\n        const { router } = this.props;\r\n        let search;\r\n        if (router.query) {\r\n            search = router.query.search;\r\n        }\r\n        const searchHistory = JSON.parse(localStorage.read('searchHistory')) || [];\r\n        const postHistory = JSON.parse(localStorage.read('postHistory')) || [];\r\n        this.setState({\r\n            search,\r\n            searchHistory,\r\n            postHistory,\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: IProps) {\r\n        if (this.state.isMobile\r\n        && (nextProps.router.pathname !== this.props.router.pathname)) {\r\n            this.setState({\r\n                collapsed: false,\r\n            });\r\n        }\r\n        if (nextProps.post !== this.props.post) {\r\n            const postHistory = JSON.parse(localStorage.read('postHistory')) || [];\r\n            this.setState({\r\n                postHistory,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleClick = (key: string) => {\r\n        if (this.state.isMobile) {\r\n            this.handleCancel();\r\n        }\r\n        Router.push(`/?tag=${key}`);\r\n    }\r\n\r\n    handleSearch = (value: string) => {\r\n        if (value && value.length) {\r\n            const findIndex = this.state.searchHistory.indexOf(value);\r\n            if (findIndex >= 0) {\r\n                this.state.searchHistory.splice(findIndex, 1);\r\n            }\r\n            this.state.searchHistory.unshift(value);\r\n            localStorage.write('searchHistory', JSON.stringify(this.state.searchHistory));\r\n            this.setState({\r\n                searchHistory: this.state.searchHistory,\r\n            });\r\n        }\r\n        if (this.state.isMobile) {\r\n            this.handleCancel();\r\n        }\r\n        this.setState({\r\n            search: value,\r\n        });\r\n        if (value.length) {\r\n            Router.push(`/?search=${value}`);\r\n        } else {\r\n            Router.push('/');\r\n        }\r\n    }\r\n\r\n    handleChangeSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            search: e.target.value,\r\n        });\r\n    }\r\n\r\n    handleSelectSearchHistory = (search: string) => {\r\n        if (this.state.isMobile) {\r\n            this.handleCancel();\r\n        }\r\n        this.setState({\r\n            search,\r\n        });\r\n        if (search.length) {\r\n            Router.push(`/?search=${search}`);\r\n        } else {\r\n            Router.push('/');\r\n        }\r\n    }\r\n\r\n    handleSelectPostHistory = (post: any) => {\r\n        if (this.state.isMobile) {\r\n            this.handleCancel();\r\n        }\r\n        Router.push(post.path);\r\n    }\r\n\r\n    handleDeleteSearchHistory = (index: number) => {\r\n        this.state.searchHistory.splice(index, 1);\r\n        localStorage.write('searchHistory', JSON.stringify(this.state.searchHistory));\r\n        this.setState({\r\n            searchHistory: this.state.searchHistory,\r\n        });\r\n    }\r\n\r\n    handleDeletePostHistory = (index: number) => {\r\n        this.state.postHistory.splice(index, 1);\r\n        localStorage.write('postHistory', JSON.stringify(this.state.postHistory));\r\n        this.setState({\r\n            postHistory: this.state.postHistory,\r\n        });\r\n    }\r\n\r\n    handleClearSearchHistory = () => {\r\n        localStorage.write('searchHistory', JSON.stringify([]));\r\n        this.setState({\r\n            searchHistory: [],\r\n        });\r\n    }\r\n\r\n    handleClearPostHistory = () => {\r\n        localStorage.write('postHistory', JSON.stringify([]));\r\n        this.setState({\r\n            postHistory: [],\r\n        });\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            collapsed: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { tags } = this.props;\r\n        const { isMobile, collapsed, search, searchHistory, postHistory } = this.state;\r\n        return (\r\n            <Dialog\r\n                visible={collapsed}\r\n                width={isMobile ? '100%' : '50%'}\r\n                closable={!isMobile}\r\n                onCancel={this.handleCancel}\r\n                style={{ maxWidth: isMobile ? '100%' : null }}\r\n                contentStyle={{ padding: 0 }}\r\n                titleStyle={{\r\n                    backgroundColor: '#fff',\r\n                    padding: isMobile ? 0 : null,\r\n                    width: isMobile ? null : '100%',\r\n                }}\r\n                footerStyle={{ justifyContent: 'center' }}\r\n                footer={(\r\n                    <a href=\"https://github.com/salgum1114\" target=\"_blank\">\r\n                        <Icon style={{ fontSize: '1.25rem' }} type=\"github\" />\r\n                    </a>\r\n                )}\r\n            >\r\n                <div className=\"blog-search\" style={styles.container}>\r\n                    {\r\n                        isMobile ? (\r\n                            <div style={{ margin: 8 }}>\r\n                                <Input.Search\r\n                                    prefix={<Icon type=\"arrow-left\" onClick={this.handleCancel} />}\r\n                                    onChange={this.handleChangeSearch}\r\n                                    onSearch={this.handleSearch}\r\n                                    value={search}\r\n                                    style={{ height: 48 }}\r\n                                />\r\n                            </div>\r\n                        ) : (\r\n                            <div style={styles.search}>\r\n                                <Input.Search\r\n                                    onChange={this.handleChangeSearch}\r\n                                    onSearch={this.handleSearch}\r\n                                    value={search}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    }\r\n                    <div style={styles.search}>\r\n                        <h4>최근 검색</h4>\r\n                        {\r\n                            searchHistory.reduce((prev, curr, index) => {\r\n                                if (index > 10) {\r\n                                    return prev;\r\n                                }\r\n                                return prev.concat(\r\n                                    <div\r\n                                        className=\"blog-search-history\"\r\n                                        key={curr}\r\n                                        style={styles.historyList}\r\n                                        onClick={() => this.handleSelectSearchHistory(curr)}\r\n                                    >\r\n                                        <Icon type=\"clock-circle\" theme=\"filled\" />\r\n                                        <div style={styles.history} >\r\n                                            {curr}\r\n                                        </div>\r\n                                        <div style={styles.historyAction}>\r\n                                            <Icon type=\"close\" onClick={(e) => { e.stopPropagation(); this.handleDeleteSearchHistory(index); }} />\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }, [])\r\n                        }\r\n                        {\r\n                            searchHistory.length ? (\r\n                                <a onClick={this.handleClearSearchHistory} style={styles.historyClear}>최근 검색 모두 지우기</a>\r\n                            ) : (\r\n                                <div style={{ ...styles.historyClear, color: '#999999' }}>검색 기록이 없습니다</div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <div style={styles.search}>\r\n                        <h4>최근 기록</h4>\r\n                        {\r\n                            postHistory.reduce((prev, curr, index) => {\r\n                                if (index > 10) {\r\n                                    return prev;\r\n                                }\r\n                                return prev.concat(\r\n                                    <div\r\n                                        className=\"blog-search-history\"\r\n                                        key={curr.path}\r\n                                        style={styles.historyList}\r\n                                        onClick={() => this.handleSelectPostHistory(curr)}\r\n                                    >\r\n                                        <Icon type=\"clock-circle\" theme=\"filled\" />\r\n                                        <div style={styles.history} >\r\n                                            {curr.title}\r\n                                        </div>\r\n                                        <div style={styles.historyAction}>\r\n                                            <Icon type=\"close\" onClick={(e) => { e.stopPropagation(); this.handleDeletePostHistory(index); }} />\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }, [])\r\n                        }\r\n                        {\r\n                            postHistory.length ? (\r\n                                <a onClick={this.handleClearPostHistory} style={styles.historyClear}>최근 기록 모두 지우기</a>\r\n                            ) : (\r\n                                <div style={{ ...styles.historyClear, color: '#999999' }}>읽은 기록이 없습니다</div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <div style={styles.tags}>\r\n                        <h4>전체 태그</h4>\r\n                        {\r\n                            isEmpty(tags) && Object.keys(tags).map(key => {\r\n                                const tag = tags[key];\r\n                                return (\r\n                                    <Tag key={key} style={styles.tag} onClick={() => this.handleClick(key)}>{`${key} (${tag.total})`}</Tag>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAKA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAjCA;AACA;AAuCA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAyDA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;AAhJA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAlBA;AAsBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAiGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAfA;AAmvRA;AACA;AAyRA;;;;A","sourceRoot":""}